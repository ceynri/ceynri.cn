name: Deploy to Tencent COS

# 并发控制：同一时间只允许一个部署任务运行
concurrency:
  group: tencent-cos-deployment
  cancel-in-progress: true

# 触发条件
on:
  push:
    branches:
      - main
      - deploy
  repository_dispatch:
    types: [submodule-update]
  workflow_dispatch:

env:
  # 使用项目要求的 Node.js 版本
  NODE_VERSION: '20'
  PNPM_VERSION: '10.7.0'
  # 添加环境变量控制可选功能
  ENABLE_SUBMODULE_UPDATE: ${{ vars.ENABLE_SUBMODULE_UPDATE || 'false' }}
  ENABLE_TYPE_CHECK: ${{ vars.ENABLE_TYPE_CHECK || 'true' }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          submodules: true
          fetch-depth: 0

      # 2. 更新子模块（如果需要）
      - name: Update submodules
        if: env.ENABLE_SUBMODULE_UPDATE == 'true'
        run: |
          git submodule update --remote
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain)" ]; then
            git commit -am "docs: update content"
            git push
          fi

      # 3. 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      # 4. 设置 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      # 5. 获取 pnpm store 目录
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      # 6. 缓存 pnpm store
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 7. 缓存 Astro 构建产物
      - name: Cache Astro build
        uses: actions/cache@v4
        with:
          path: |
            .astro
            node_modules/.astro
          key: ${{ runner.os }}-astro-${{ hashFiles('**/astro.config.*') }}-${{ hashFiles('src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-astro-${{ hashFiles('**/astro.config.*') }}-
            ${{ runner.os }}-astro-

      # 8. 安装依赖
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      # 9. 运行类型检查和代码质量检查
      - name: Type check and lint
        if: env.ENABLE_TYPE_CHECK == 'true'
        run: |
          pnpm astro check
          pnpm lint

      # 10. 构建项目
      - name: Build project
        run: pnpm build

      # 11. 验证构建产物
      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build output directory 'dist' not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "❌ index.html not found in build output"
            exit 1
          fi
          echo "✅ Build verification passed"
          echo "📊 Build output size: $(du -sh dist)"

      # 12. 部署到腾讯云 COS 并刷新 CDN
      - name: Deploy to Tencent COS and refresh CDN
        uses: ceynri/tencent-cos-and-cdn-action@master
        with:
          # 腾讯云 API 密钥 ID
          secret_id: ${{ secrets.TENCENT_SECRET_ID }}
          # 腾讯云 API 密钥 Key
          secret_key: ${{ secrets.TENCENT_SECRET_KEY }}
          # COS 存储桶名称 (eg: my-website-1234567890)
          cos_bucket: ${{ secrets.TENCENT_COS_BUCKET }}
          # COS 存储桶区域 (eg: ap-shanghai)
          cos_region: ${{ secrets.TENCENT_COS_REGION }}
          # 指定 COS 存储类型为多 AZ 标准类型
          cos_put_options: '{"StorageClass":"MAZ_STANDARD"}'
          # 是否替换同名文件
          cos_replace_file: false
          # 使用 COS 的加速域名进行上传
          cos_accelerate: true
          # CDN 域名前缀 (eg: https://cdn.example.com/)
          cdn_prefix: ${{ secrets.TENCENT_CDN_PREFIX }}
          # 等待 CDN 刷新完成再结束 step
          cdn_wait_flush: true
          # 项目文件本地路径
          local_path: dist
          # COS 桶上传路径
          remote_path: /
          # 上传完后清理 remote_path 中非本次上传的文件
          clean: true

      # 13. 部署结果
      - name: Deployment result summary
        run: |
          echo "✅ Deployment successful! Website has been updated to Tencent COS, CDN cache has been refreshed."
          echo "🎉 Build output size: $(du -sh dist | cut -f1)"
          echo "📅 Deployment time: $(date)"

  # 部署后的健康检查
  health-check:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Health check
        run: |
          if [ -n "${{ secrets.TENCENT_CDN_PREFIX }}" ]; then
            echo "🔍 Checking deployment status..."
            
            # 等待 CDN 刷新完成
            sleep 30
            
            # 检查网站是否可访问
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.TENCENT_CDN_PREFIX }}" || echo "000")
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ Website health check passed (HTTP $HTTP_STATUS)"
            else
              echo "⚠️ Website health check failed (HTTP $HTTP_STATUS)"
              echo "This might be due to CDN cache not being refreshed yet, please try again later"
              exit 1
            fi
          else
            echo "ℹ️ Skipping health check: CDN domain not configured"
          fi
